<?php

/**
 * Stub file for standard library functions with template support
 *
 * This file provides template type annotations for standard library functions
 * that preserve types through transformations. These annotations are not
 * available from PHP reflection.
 *
 * @phan-file-suppress PhanRedefinedFunction
 */

namespace {

/**
 * @template TKey
 * @template TValue
 * @param array<TKey, TValue> $array
 * @param callable(TValue, TKey): bool $callback
 * @return TValue|null
 * @since 8.4
 */
function array_find(array $array, callable $callback): mixed {}

/**
 * @template TKey
 * @template TValue
 * @param array<TKey, TValue> $array
 * @param callable(TValue, TKey): bool $callback
 * @return TKey|null
 * @since 8.4
 */
function array_find_key(array $array, callable $callback): mixed {}

/**
 * @template TKey
 * @template TValue
 * @param array<TKey, TValue> $array
 * @param callable(TValue, TKey): bool $callback
 * @return bool
 * @since 8.4
 */
function array_any(array $array, callable $callback): bool {}

/**
 * @template TKey
 * @template TValue
 * @param array<TKey, TValue> $array
 * @param callable(TValue, TKey): bool $callback
 * @return bool
 * @since 8.4
 */
function array_all(array $array, callable $callback): bool {}

/**
 * @template TKey of array-key
 * @template TValue
 * @param array<TKey, TValue> $array
 * @param callable(TValue, TKey): bool|null $callback
 * @param int $mode
 * @return array<TKey, TValue>
 */
function array_filter(array $array, ?callable $callback = null, int $mode = 0): array {}

/**
 * @template TValue
 * @template TResult
 * @param callable(TValue): TResult $callback
 * @param array<TValue> $array
 * @param array ...$arrays
 * @return array<TResult>
 */
function array_map(callable $callback, array $array, array ...$arrays): array {}

/**
 * @template TValue
 * @template TCarry
 * @param array<TValue> $array
 * @param callable(TCarry, TValue): TCarry $callback
 * @param TCarry $initial
 * @return TCarry
 */
function array_reduce(array $array, callable $callback, mixed $initial = null): mixed {}

/**
 * @template TKey
 * @template TValue
 * @param array<TKey, TValue> $array
 * @return array<TValue, TKey>
 */
function array_flip(array $array): array {}

/**
 * @template TKey
 * @template TValue
 * @param array<TKey, TValue> $array
 * @return list<TKey>
 */
function array_keys(array $array, mixed $filter_value = null, bool $strict = false): array {}

/**
 * @template TKey
 * @template TValue
 * @param array<TKey, TValue> $array
 * @return list<TValue>
 */
function array_values(array $array): array {}

}
